# .github/workflows/docker-build-publish.yml
name: 🐳 Build & Publish gpt-proxy Docker Image

on:
  push:
    branches:
      - main # 当代码推送到 main 分支时触发
    tags:
      - 'v*.*.*' # 当创建 vX.Y.Z 格式的 Git Tag 时触发
  pull_request:
    branches:
      - main # 对 main 分支的 PR 也进行构建，但不发布
  workflow_dispatch: # 允许手动触发此 workflow

env:
  # 替换为你的 Docker Hub 用户名和镜像名
  # 例如：your-docker-username/gpt-proxy
  DOCKER_IMAGE_NAME: nalvix/gpt-proxy 

jobs:
  build-and-publish:
    runs-on: ubuntu-latest # 在 Ubuntu 虚拟机上运行

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4 # 拉取仓库代码

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # 设置 Docker Buildx，支持多平台和缓存

      - name: 🔑 Login to Docker Hub
        # 只有在非 Pull Request 事件时才登录和发布
        if: github.event_name != 'pull_request' 
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Extract Docker metadata (tags, labels)
        id: meta # 为此步骤分配一个 ID，以便其他步骤引用其输出
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }} # 使用上面定义的镜像名
          tags: | # 定义镜像标签的生成规则
            type=schedule
            type=ref,event=branch # 例如：main -> latest (如果默认分支) 或 main
            type=ref,event=pr # 例如：pr-123
            type=semver,pattern={{version}} # 例如：v1.0.0 -> 1.0.0
            type=semver,pattern={{major}}.{{minor}} # 例如：v1.0.0 -> 1.0
            type=semver,pattern={{major}} # 例如：v1.0.0 -> 1
            type=sha,format=long # 例如：abcdef123456
            # 只有在推送到默认分支 (main) 时才打 latest 标签
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }} 

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile 的上下文路径，默认为当前仓库根目录
          file: ./Dockerfile # Dockerfile 的路径，默认为 Dockerfile
          # 只有在非 Pull Request 事件时才进行 push
          push: ${{ github.event_name != 'pull_request' }} 
          tags: ${{ steps.meta.outputs.tags }} # 使用 metadata-action 生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用 metadata-action 生成的标签
          cache-from: type=gha # 启用 GitHub Actions 缓存，加速后续构建
          cache-to: type=gha,mode=max # 将缓存写入 GitHub Actions 缓存
